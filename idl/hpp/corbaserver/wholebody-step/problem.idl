// Copyright (C) 2011,2012 CNRS-LAAS
// Author: Sebastien Dalibard.
//
// This file is part of the hpp-wholebody-step-corba.
//
// hpp-wholebody-step-corba is free software: you can redistribute
// it and/or modify it under the terms of the GNU Lesser General
// Public License as published by the Free Software Foundation, either
// version 3 of the License, or (at your option) any later version.
//
// hpp-wholebody-step-corba is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with hpp-wholebody-step-corba.  If not, see
// <http://www.gnu.org/licenses/>.

#ifndef HPP_WHOLEBODY_STEP_CORBA_IDL
# define HPP_WHOLEBODY_STEP_CORBA_IDL

module hpp {
  /// Corba exception travelling through the Corba channel
  exception Error
  {
    string msg;
  };
  /// Robot configuration is defined by a sequence of dof value.
  typedef sequence<double> dofSeq;
  typedef sequence<dofSeq> dofSeqSeq;

  module corbaserver {
  module wholebody_step {
  interface Problem {
    /// Create static stability constraints and store into ProblemSolver
    /// \param prefix prefix of the names of the constraint as stored in
    ///        core::ProblemSolver,
    /// \param dofArray input configuration for computing constraint reference,
    /// \param leftAnkle, rightAnkle: names of the ankle joints.
    /// \param comName name of the PartialCOM in the problem solver map. Put "" for
    ///        a full COM computations.
    ///
    /// Five constraints are created and store with the following keys by
    /// calling method core::ProblemSolver::addNumericalConstraint:
    /// \li prefix + "/relative-com": relative position of the center of mass in
    ///     the left ankle frame,
    /// \li prefix + "/relative-orientation": relative orientation of the feet,
    /// \li prefix + "/relative-position": relative position of the feet,
    /// \li prefix + "/orientation-left-foot": orientation of the left foot,
    /// \li prefix + "/position-left-foot": position of the left foot.
    void addStaticStabilityConstraints (in string prefix, in dofSeq dofArray,
                                        in string leftAnkle, in string rightAnkle,
                                        in string comName)
      raises (Error);

    /// Create constraints that ensure that the COM is between the two ankles
    /// and store into ProblemSolver
    /// \param prefix prefix of the names of the constraint as stored in
    ///        core::ProblemSolver,
    /// \param dofArray input configuration for computing constraint reference,
    /// \param leftAnkle, rightAnkle: names of the ankle joints.
    /// \param comName name of the PartialCOM in the problem solver map. Put "" for
    ///        a full COM computations.
    ///
    /// Five constraints are created and store with the following keys by
    /// calling method core::ProblemSolver::addNumericalConstraint:
    /// \li prefix + "/com-between-feet": The COM projection along z lies between the
    ///                                   the two ankles
    /// \li prefix + "/orientation-right": orientation of the right foot,
    /// \li prefix + "/position-right": position of the right foot,
    /// \li prefix + "/orientation-left": orientation of the left foot,
    /// \li prefix + "/position-left": position of the left foot.
    void addStabilityConstraints (in string prefix, in dofSeq dofArray,
                                        in string leftAnkle, in string rightAnkle,
                                        in string comName)
      raises (Error);

    /// Generate a goal configuration.
    /// \param x, y, z: desired position of the end effector (right hand)
    /// \param nbConfig Number of goal configurations to generate.
    void generateGoalConfig (in double x, in double y, in double z,
			     in unsigned short nbConfig) raises (Error);
  }; //interface Problem
  }; // module wholebody_step
  }; // module corbaserver
}; // module hpp

#endif // HPP_WHOLEBODY_STEP_CORBA_IDL
